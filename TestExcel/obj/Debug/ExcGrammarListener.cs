//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\Desktop\TestExcel\TestExcel\ExcGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TestExcel {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExcGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IExcGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ModDivExpression</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModDivExpression([NotNull] ExcGrammarParser.ModDivExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ModDivExpression</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModDivExpression([NotNull] ExcGrammarParser.ModDivExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpr([NotNull] ExcGrammarParser.MultiplicativeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpr([NotNull] ExcGrammarParser.MultiplicativeExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>UnminExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnminExpr([NotNull] ExcGrammarParser.UnminExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnminExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnminExpr([NotNull] ExcGrammarParser.UnminExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExponentialExpr([NotNull] ExcGrammarParser.ExponentialExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExponentialExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExponentialExpr([NotNull] ExcGrammarParser.ExponentialExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpr([NotNull] ExcGrammarParser.AdditiveExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpr([NotNull] ExcGrammarParser.AdditiveExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpr([NotNull] ExcGrammarParser.NumberExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpr([NotNull] ExcGrammarParser.NumberExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpr([NotNull] ExcGrammarParser.ParenthesizedExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpr([NotNull] ExcGrammarParser.ParenthesizedExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MinExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinExpr([NotNull] ExcGrammarParser.MinExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MinExpr</c>
	/// labeled alternative in <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinExpr([NotNull] ExcGrammarParser.MinExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExcGrammarParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompileUnit([NotNull] ExcGrammarParser.CompileUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExcGrammarParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompileUnit([NotNull] ExcGrammarParser.CompileUnitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ExcGrammarParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExcGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ExcGrammarParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExcGrammarParser.arglist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArglist([NotNull] ExcGrammarParser.ArglistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExcGrammarParser.arglist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArglist([NotNull] ExcGrammarParser.ArglistContext context);
}
} // namespace TestExcel
